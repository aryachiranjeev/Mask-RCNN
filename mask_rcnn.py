# -*- coding: utf-8 -*-
"""Mask-RCNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aHWlXGTEeAFxN3L4lkJdtkDQsYKtxlc8
"""

import torch
import torchvision 
import torchvision.transforms as T
import PIL
from PIL import Image
import random
import matplotlib.pyplot as plt
import numpy as np
import cv2

model=torchvision.models.detection.maskrcnn_resnet50_fpn(pretrained=True)
model.eval()

coco_instance_category_names=[ '__background__', 'person', 'bicycle', 'car', 'motorcycle', 'airplane', 'bus',
    'train', 'truck', 'boat', 'traffic light', 'fire hydrant', 'N/A', 'stop sign',
    'parking meter', 'bench', 'bird', 'cat', 'dog', 'horse', 'sheep', 'cow',
    'elephant', 'bear', 'zebra', 'giraffe', 'N/A', 'backpack', 'umbrella', 'N/A', 'N/A',
    'handbag', 'tie', 'suitcase', 'frisbee', 'skis', 'snowboard', 'sports ball',
    'kite', 'baseball bat', 'baseball glove', 'skateboard', 'surfboard', 'tennis racket',
    'bottle', 'N/A', 'wine glass', 'cup', 'fork', 'knife', 'spoon', 'bowl',
    'banana', 'apple', 'sandwich', 'orange', 'broccoli', 'carrot', 'hot dog', 'pizza',
    'donut', 'cake', 'chair', 'couch', 'potted plant', 'bed', 'N/A', 'dining table',
    'N/A', 'N/A', 'toilet', 'N/A', 'tv', 'laptop', 'mouse', 'remote', 'keyboard', 'cell phone',
    'microwave', 'oven', 'toaster', 'sink', 'refrigerator', 'N/A', 'book',
    'clock', 'vase', 'scissors', 'teddy bear', 'hair drier', 'toothbrush']

def random_color_masks(image):
  colors = [[0, 255, 0],[0, 0, 255],[255, 0, 0],[0, 255, 255],[255, 255, 0],[255, 0, 255],[80, 70, 180],[250, 80, 190],[245, 145, 50],[70, 150, 250],[50, 190, 190]]
  r=np.zeros_like(image).astype(np.uint8)
  g=np.zeros_like(image).astype(np.uint8)
  b=np.zeros_like(image).astype(np.uint8)
  r[image==1],b[image==1],g[image==1]=colors[random.randrange(0,10)]  
  colored_mask=np.stack([r,g,b],axis=2)
  
  return colored_mask


def get_prediction(threshold,image):
  
  # print("prediction")
  img=image.astype(np.uint8)
  img=PIL.Image.fromarray(img)
  transform=T.Compose([T.ToTensor()])
  img=transform(img)
  # model.cuda()
  # img = img.cuda()
  pred=model([img])
  pred_score=list(pred[0]['scores'].detach().cpu().numpy())
  pred_t=[pred_score.index(x) for x in pred_score if x>threshold][-1]
  masks=(pred[0]['masks']>0.5).squeeze().detach().cpu().numpy()
  pred_class=[coco_instance_category_names[i] for i in list(pred[0]['labels'])]
  pred_boxes=[[(i[0],i[1]),(i[2],i[3])] for i in list(pred[0]['boxes'].detach().cpu().numpy())]
  masks=masks[:pred_t+1]
  pred_boxes=pred_boxes[:pred_t +1]
  pred_class=pred_class[:pred_t +1]
  
  return masks,pred_boxes,pred_class

def instance_segmentation_api(threshold,image1,rect_thickness=2,text_size=2,text_thickness=2):

  # print("instance")
  masks,boxes,predict_class= get_prediction(threshold,image=image1)
  image=image1
  image=cv2.cvtColor(image,cv2.COLOR_BGR2RGB)
  for i in range(len(masks)):
    rgb_mask=random_color_masks(masks[i])
    image=cv2.addWeighted(image,1,rgb_mask,0.5,0)
    cv2.rectangle(image,boxes[i][0],boxes[i][1],color=(0,255,0),thickness=rect_thickness)
    cv2.putText(image,predict_class[i],boxes[i][1],cv2.FONT_HERSHEY_SIMPLEX,text_size,(0,255,0),thickness=text_thickness)
    return image
  # plt.figure(figsize=(20,30))
  # plt.imshow(image)
  # plt.xticks([])
  # plt.yticks([])
  # plt.show()
  

cap=cv2.VideoCapture(0)
while True:
    ret,frame=cap.read()
    image=instance_segmentation_api(threshold=0.75,image1=frame)
    cv2.imshow('image',image)
    if cv2.waitKey(1)==ord('a'):
        break
cap.release()

cv2.destroyAllWindows()

